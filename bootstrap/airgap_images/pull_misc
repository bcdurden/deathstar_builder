#!/bin/bash

## harbor
DEST_DIRECTORY=/tmp/harbor-images
DEST_TAR=/tmp/harbor-images.tar.gz 

HARBOR_RELEASE=1.9.3

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

# Add harbor repo
helm repo add harbor https://helm.goharbor.io
helm repo update 

# Grab the list of images and download them (requires docker, grep, sed, and awk)
for image in $(helm template harbor/harbor --version ${HARBOR_RELEASE} | grep 'image:' | sed 's/"//g' | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|goharbor/|TARGET_REGISTRY/goharbor/|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/harbor-image.XXXXXXX)
    img_id_num=${img_dir: -20}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
    if [ $? != 0 ]; then
      cosign save --dir "$DEST_DIRECTORY/$img_id_num" $source_image
    fi
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY

## loki
DEST_DIRECTORY=/tmp/loki-images
DEST_TAR=/tmp/loki-images.tar.gz 

LOKI_RELEASE=2.8.3

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

# Add harbor repo
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update 

# Grab the list of images and download them (requires docker, grep, sed, and awk)
for image in $(helm template grafana/loki-stack --version ${LOKI_RELEASE} | grep 'image:' | sed -e 's/^[ \t]*//' | sed 's/"//g' | sort --unique | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|busybox|TARGET_REGISTRY/grafana/busybox|g" | sed "s|nginxinc|grafana|g" | sed "s|docker.io/||g" | sed "s|grafana/|TARGET_REGISTRY/grafana/|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/loki-image.XXXXXXX)
    img_id_num=${img_dir: -18}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
    if [ $? != 0 ]; then
      cosign save --dir "$DEST_DIRECTORY/$img_id_num" $source_image
    fi
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY

# hashicorp
DEST_DIRECTORY=/tmp/hashicorp-images
DEST_TAR=/tmp/hashicorp-images.tar.gz 

CONSUL_RELEASE=0.39.0
VAULT_RELEASE=0.22.0

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

helm repo add hashicorp https://helm.releases.hashicorp.com
helm repo update 

# Grab the list of images and download them (requires docker, grep, sed, and awk)
for image in $(helm template hashicorp/consul --version ${CONSUL_RELEASE} | grep 'image:' | sed -e 's/^[ \t]*//' | sed 's/"//g' | sort --unique | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|hashicorp|TARGET_REGISTRY/hashicorp|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/hashicorp-image.XXXXXXX)
    img_id_num=${img_dir: -24}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
    if [ $? != 0 ]; then
      cosign save --dir "$DEST_DIRECTORY/$img_id_num" $source_image
    fi
done
for image in $(helm template hashicorp/vault --version ${VAULT_RELEASE} | grep 'hashicorp/' | sed -e 's/^[ \t]*//' | sed 's/"//g' | sort --unique | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|hashicorp|TARGET_REGISTRY/hashicorp|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/hashicorp-image.XXXXXXX)
    img_id_num=${img_dir: -24}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
    if [ $? != 0 ]; then
      cosign save --dir "$DEST_DIRECTORY/$img_id_num" $source_image
    fi
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY

# keycloak
DEST_DIRECTORY=/tmp/keycloak-images
DEST_TAR=/tmp/keycloak-images.tar.gz 

KEYCLOAK_RELEASE=21.1.1

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

for image in $(wget -q -O - https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/$KEYCLOAK_RELEASE/kubernetes-examples/keycloak.yaml | grep 'quay.io/' | sed -e 's/^[ \t]*//' | sed 's/"//g' | sort --unique | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|quay.io/keycloak|TARGET_REGISTRY/keycloak|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/keycloak-image.XXXXXXX)
    img_id_num=${img_dir: -23}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
    if [ $? != 0 ]; then
      cosign save --dir "$DEST_DIRECTORY/$img_id_num" $source_image
    fi
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY