---
# Source: stack/charts/boots/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: boots
  namespace: "tink-system"
---
# Source: stack/templates/kubevip.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-vip
  namespace: "tink-system"
---
# Source: stack/charts/boots/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: boots-role
rules:
  - apiGroups:
      - tinkerbell.org
    resources:
      - hardware
      - hardware/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - tinkerbell.org
    resources:
      - workflows
      - workflows/status
    verbs:
      - get
      - list
      - watch
---
# Source: stack/templates/kubevip.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: kube-vip-role
rules:
  - apiGroups: [""]
    resources:
      - "services"
      - "services/status"
      - "nodes"
      - "endpoints"
    verbs:
      - "list"
      - "get"
      - "watch"
      - "update"
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - "leases"
    verbs:
      - "list"
      - "get"
      - "watch"
      - "update"
      - "create"
---
# Source: stack/charts/boots/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: boots-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: boots-role
subjects:
  - kind: ServiceAccount
    name: boots
    namespace: "tink-system"
---
# Source: stack/templates/kubevip.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-vip-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-vip-role
subjects:
- kind: ServiceAccount
  name: kube-vip
  namespace: "tink-system"
---
# Source: stack/charts/boots/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: boots
  name: boots
  namespace: "tink-system"
spec:
  type: LoadBalancer
  loadBalancerClass: kube-vip.io/kube-vip-class
  loadBalancerIP: 10.10.0.20
  externalTrafficPolicy: Local
  ports:  
  - port: 80
    name: boots-http
    protocol: TCP
  - port: 514
    name: boots-syslog
    protocol: UDP
  - port: 67
    name: boots-dhcp
    protocol: UDP
  - port: 69
    name: boots-tftp
    protocol: UDP
  selector:
    app: boots
---
# Source: stack/templates/kubevip.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-vip
  namespace: "tink-system"
  labels:
    app.kubernetes.io/name: kube-vip
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-vip
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-vip
    spec:
      containers:
      - args:
        - manager
        env:
        - name: vip_arp
          value: "true"
        - name: svc_enable
          value: "true"
        - name: svc_election
          value: "true"
        - name: enableServicesElection
          value: "true"
        image: ghcr.io/kube-vip/kube-vip:v0.5.12
        imagePullPolicy: IfNotPresent
        name: kube-vip
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
      hostNetwork: true
      serviceAccountName: kube-vip
---
# Source: stack/charts/boots/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: boots
  name: boots
  namespace: "tink-system"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: boots
      stack: tinkerbell
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: boots
        stack: tinkerbell
    spec:
      containers:
        - image: gmehta3/boots:dev
          imagePullPolicy: IfNotPresent
          args:
            - -dhcp-addr=0.0.0.0:67
            - -ipxe-tftp-addr=0.0.0.0:69
            - -http-addr=0.0.0.0:80
            - -syslog-addr=0.0.0.0:514
            - -osie-path-override=http://10.10.0.20:8080
          env:
            - name: TRUSTED_PROXIES
              value: "10.42.0.0/24"
            - name: DATA_MODEL_VERSION
              value: "kubernetes"
            - name: FACILITY_CODE
              value: "lab1"
            - name: MIRROR_BASE_URL
              value: "http://10.10.0.20:8080"
            - name: PUBLIC_IP
              value: "10.10.0.20"
            - name: PUBLIC_SYSLOG_FQDN
              value: "10.10.0.20"
            - name: TINKERBELL_GRPC_AUTHORITY
              value: "10.10.0.20:42113"
            - name: TINKERBELL_TLS
              value: "false"
            - name: BOOTS_EXTRA_KERNEL_ARGS
              value: "tink_worker_image=quay.io/tinkerbell/tink-worker:v0.9.0"
            - name: BOOTS_LOG_LEVEL
              value: "DEBUG"
          ports:            
            - containerPort: 80
              name: boots-http
              protocol: TCP
            - containerPort: 514
              name: boots-syslog
              protocol: UDP
            - containerPort: 67
              name: boots-dhcp
              protocol: UDP
            - containerPort: 69
              name: boots-tftp
              protocol: UDP
          name: boots
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
      serviceAccountName: boots
---
# Source: stack/templates/relay.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tink-stack-relay
  namespace: "tink-system"
spec:
  selector:
    matchLabels:
      app: dhcp-relay
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: dhcp-relay
    spec:
      containers:
      - name: dhcp-relay
        image: ghcr.io/jacobweinstock/dhcrelay
        args: ["-m", "append", "-c", "10", "-id", "macvlan99", "-iu", "eth0", "-U", "eth0", "boots.tink-system.svc.cluster.local."]
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          capabilities:
            add:
              - NET_RAW
      hostPID: true
      initContainers:
      - command:
          - /bin/sh
          - -c
          - |
            # This script allows us to listen and respond to DHCP requests on a host network interface and interact with Boots properly.
            # This is used instead of `hostNetwork: true` because the dhcp relay requires clear paths for listening for broadcast traffic
            # and sending/receiving unicast traffic to/from Boots.
            set -xe
            # if sourceInterface is not set use the interface from the default route
            srcInterface=""
            if [ -z "$srcInterface" ]; then
              srcInterface=$(nsenter -t1 -n ip route | awk '/default/ {print $5}')
            fi
            # Create a macvlan interface. TODO: If this fails, try again with a different name?
            nsenter -t1 -n ip link add macvlan99 link ${srcInterface} type macvlan mode bridge
            # Move the interface into the POD.
            pid=$(echo $$)
            nsenter -t1 -n ip link set macvlan99 netns ${pid} || nsenter -t1 -n ip link delete macvlan99
            # Set the macvlan interface up
            ip link set macvlan99 up
            # Set the IP address
            ip addr add 10.10.0.20/32 dev macvlan99 noprefixroute
        image: alpine
        name: macvlan-interface
        securityContext:
          privileged: true